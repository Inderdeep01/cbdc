// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: api/cbdc.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CBDC_GetBalance_FullMethodName    = "/api.CBDC/GetBalance"
	CBDC_Tx_FullMethodName            = "/api.CBDC/Tx"
	CBDC_Fund_FullMethodName          = "/api.CBDC/Fund"
	CBDC_CreateAccount_FullMethodName = "/api.CBDC/CreateAccount"
	CBDC_Mint_FullMethodName          = "/api.CBDC/Mint"
)

// CBDCClient is the client API for CBDC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CBDCClient interface {
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// CBDC Transaction
	Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxResponse, error)
	// Deposit CBDC from UPI or Bank transfers
	Fund(ctx context.Context, in *FundRequest, opts ...grpc.CallOption) (*FundResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	Mint(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintResponse, error)
}

type cBDCClient struct {
	cc grpc.ClientConnInterface
}

func NewCBDCClient(cc grpc.ClientConnInterface) CBDCClient {
	return &cBDCClient{cc}
}

func (c *cBDCClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, CBDC_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBDCClient) Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResponse)
	err := c.cc.Invoke(ctx, CBDC_Tx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBDCClient) Fund(ctx context.Context, in *FundRequest, opts ...grpc.CallOption) (*FundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundResponse)
	err := c.cc.Invoke(ctx, CBDC_Fund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBDCClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, CBDC_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cBDCClient) Mint(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintResponse)
	err := c.cc.Invoke(ctx, CBDC_Mint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CBDCServer is the server API for CBDC service.
// All implementations must embed UnimplementedCBDCServer
// for forward compatibility.
type CBDCServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// CBDC Transaction
	Tx(context.Context, *TxRequest) (*TxResponse, error)
	// Deposit CBDC from UPI or Bank transfers
	Fund(context.Context, *FundRequest) (*FundResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	Mint(context.Context, *MintRequest) (*MintResponse, error)
	mustEmbedUnimplementedCBDCServer()
}

// UnimplementedCBDCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCBDCServer struct{}

func (UnimplementedCBDCServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedCBDCServer) Tx(context.Context, *TxRequest) (*TxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tx not implemented")
}
func (UnimplementedCBDCServer) Fund(context.Context, *FundRequest) (*FundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fund not implemented")
}
func (UnimplementedCBDCServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCBDCServer) Mint(context.Context, *MintRequest) (*MintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (UnimplementedCBDCServer) mustEmbedUnimplementedCBDCServer() {}
func (UnimplementedCBDCServer) testEmbeddedByValue()              {}

// UnsafeCBDCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CBDCServer will
// result in compilation errors.
type UnsafeCBDCServer interface {
	mustEmbedUnimplementedCBDCServer()
}

func RegisterCBDCServer(s grpc.ServiceRegistrar, srv CBDCServer) {
	// If the following call pancis, it indicates UnimplementedCBDCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CBDC_ServiceDesc, srv)
}

func _CBDC_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBDCServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBDC_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBDCServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBDC_Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBDCServer).Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBDC_Tx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBDCServer).Tx(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBDC_Fund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBDCServer).Fund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBDC_Fund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBDCServer).Fund(ctx, req.(*FundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBDC_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBDCServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBDC_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBDCServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CBDC_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CBDCServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CBDC_Mint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CBDCServer).Mint(ctx, req.(*MintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CBDC_ServiceDesc is the grpc.ServiceDesc for CBDC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CBDC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CBDC",
	HandlerType: (*CBDCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _CBDC_GetBalance_Handler,
		},
		{
			MethodName: "Tx",
			Handler:    _CBDC_Tx_Handler,
		},
		{
			MethodName: "Fund",
			Handler:    _CBDC_Fund_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _CBDC_CreateAccount_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _CBDC_Mint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cbdc.proto",
}
